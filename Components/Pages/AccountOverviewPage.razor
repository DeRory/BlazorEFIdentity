@page "/AccountOverview"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using BlazorEFIdentity.Data
@using BlazorEFIdentity.Models
@using BlazorEFIdentity.Services
@rendermode InteractiveServer

@* Detta ger oss tillgång till tjänster/funktioner i Service filen som hanterar bankkontot. *@
@inject BankAccountService AccountService 
@*Används för att få den inloggade användaren*@
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation


@* Vad vill jag göra? Jag har skapat en sida med relevant CSS, där jag vill kunna skapa en bankkonto knytet till en användare, där användaren kan lägga till saldo för respektive konto.
Användaren ska kunna även välja om det är exempelvis ISK eller sparkonto. Jag vill även kunna se ifall kontots status är aktiv eller ej. Jag vill kunna se transaktionshistorik.
För det skulle jag nog behöva lägga till att jag måste använda servicen i detta komponent men även AuthenticationStateProvider AuthStateProvider eftersom den är bara inloggade användare som kan göra detta. *@

@attribute [Authorize]

<h3>Create an account! </h3>

@* EditForm Model raden kopplar formuläret nedan till newAccount modellen och kör en CreateAccount() när man klickar på Create.*@

<EditForm Model="newAccount" OnValidSubmit="CreateAccount">
    <div class="mb-3">
        <label class="form-label">Enter an account name:</label>
        <InputText class="form-control" @bind-Value="newAccount.AccountName" placeholder="Enter account name" />
    </div>

    <div class="mb-3">
        <label class="form-label">Account Number:</label>
        <InputText class="form-control" @bind-Value="newAccount.AccountNumber" placeholder="Enter account number" />
    </div>

    <div class="mb-3">
        <label class="form-label">Balance:</label>
        <InputNumber class="form-control" @bind-Value="newAccount.Balance" placeholder="Enter initial balance" />
    </div>

    <div class="mb-3">
        <label class="form-label">Enter Account Type:</label>
        <InputText class="form-control" @bind-Value="newAccount.AccountType" placeholder="Enter account type (e.g. Savings, ISK)" />
    </div>

    <div class="form-check mb-3">
        <InputCheckbox class="form-check-input" @bind-Value="newAccount.ActiveAccount" />
        <label class="form-check-label">Active Account</label>
    </div>

    <button type="submit" class="btn btn-dark">Create</button>
</EditForm>

<h3>Your Accounts</h3>

@if (accounts == null)
{
    <p>Loading...</p>
}
else if (accounts.Count == 0)
{
    <p>You have no accounts yet.</p>
}
else
{
    <table class="table table-dark table-striped">
        <thead>
            <tr>
                <th>Account Name</th>
                <th>Account Number</th>
                <th>Balance</th>
                <th>Type</th>
                <th>Status</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var account in accounts)
            {
                <tr>
                    <td>@account.AccountName</td>
                    <td>@account.AccountNumber</td>
                    <td>@account.Balance</td>
                    <td>@account.AccountType</td>
                    <td>@(account.ActiveAccount ? "Active" : "Inactive")</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteAccount(account.Id)">Delete</button>

                    </td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private List<Account> accounts = new();
    private Account newAccount = new Account();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user == null)
        {
            return;
        }
        accounts = await AccountService.GetUserAccountsAsync(user);
    }


    private async Task CreateAccount()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user == null)
        {
            return;
        }

        newAccount.UserId = user.Id;
        await AccountService.CreateAccountAsync(user, newAccount);

        accounts = await AccountService.GetUserAccountsAsync(user);

        newAccount = new Account(); // Reset form
    }

    private async Task DeleteAccount(int accountId)
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user == null)
        {
            return;
        }

        await AccountService.DeleteAccountAsync(user, accountId);

        accounts = await AccountService.GetUserAccountsAsync(user);

    }

}

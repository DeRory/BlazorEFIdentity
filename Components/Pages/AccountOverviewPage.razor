@* Sätter sidans URL *@
@page "/AccountOverview" 

@* Anger att sidan ska köra interaktivt på Blazor Projektet *@
@rendermode InteractiveServer

@* Här anges det att vi ska importera ASP.NET Identity egna API tool för autentisering ie Login *@
@using Microsoft.AspNetCore.Identity

@* Här möjligör vi användaråtkomst *@
@using Microsoft.AspNetCore.Authorization

@* Med alla using nedan som börjar med projektets namn så vill vi importera datamodeller, modeller och service *@
@using BlazorEFIdentity.Data


@using BlazorEFIdentity.Models


@using BlazorEFIdentity.Services

@* Kräver att användanre måste vara inloggad för att kunna se denna sida *@
@attribute [Authorize]


@* Detta ger oss tillgång till tjänster/funktioner i Service filen som hanterar bankkontot. Som ex att vi kan hämta och skapa konton*@
@inject BankAccountService AccountService 

@*Används för att få den inloggade användaren. Basically hämtar information om den inloggade användaren*@
@inject AuthenticationStateProvider AuthStateProvider

@* Detta används för att hantera användaruppgifter, UserManager och ApplicationUser är ASP.NET egna boilerplate template *@
@inject UserManager<ApplicationUser> UserManager

@* Detta används för att kunna navigera mellan sidor i Blazor *@
@inject NavigationManager Navigation


@* Vad vill jag göra? Jag har skapat en sida med relevant CSS, där jag vill kunna skapa en bankkonto knytet till en användare, där användaren kan lägga till saldo för respektive konto.
Användaren ska kunna även välja om det är exempelvis ISK eller sparkonto. Jag vill även kunna se ifall kontots status är aktiv eller ej. Jag vill kunna se transaktionshistorik.
För det skulle jag nog behöva lägga till att jag måste använda servicen i detta komponent men även AuthenticationStateProvider AuthStateProvider eftersom den är bara inloggade användare som kan göra detta. *@

<h3>Create an account! </h3>

@* EditForm Model raden kopplar formuläret nedan till newAccount modellen och kör en CreateAccount() när man klickar på Create.*@
<EditForm Model="newAccount" OnValidSubmit="CreateAccount">

    
    <div class="mb-3">
        <label class="form-label">Enter an account name:</label>
        <InputText class="form-control" @bind-Value="newAccount.AccountName" placeholder="Enter account name" />
    </div>

    <div class="mb-3">
        <label class="form-label">Account Number:</label>
        <InputText class="form-control" @bind-Value="newAccount.AccountNumber" placeholder="Enter account number" />
    </div>

    <div class="mb-3">
        <label class="form-label">Balance:</label>
        <InputNumber class="form-control" @bind-Value="newAccount.Balance" placeholder="Enter initial balance" />
    </div>

    <div class="mb-3">
        <label class="form-label">Enter Account Type:</label>
        <InputText class="form-control" @bind-Value="newAccount.AccountType" placeholder="Enter account type (e.g. Savings, ISK)" />
    </div>

    <div class="form-check mb-3">
        <InputCheckbox class="form-check-input" @bind-Value="newAccount.ActiveAccount" />
        <label class="form-check-label">Active Account</label>
    </div>

   @*  Raden nedan skickar formuläret och triggar igång CreateAccount() funktionen *@
    <button type="submit" class="btn btn-dark">Create</button> 
</EditForm>

<h3>Your Accounts</h3>

@* Här säger vi om kontona är ej laddade, visa paragrafen Loading... *@
@if (accounts == null) 
{
    <p>Loading...</p>
}

@* Annars ska det visa You have no accounts yet ifall användaren inte har några konton alls *@
else if (accounts.Count == 0)
{
    <p>You have no accounts yet.</p>
}

@* Om konton finns, visas denna tabell *@
else
{
    @* Här finns en table (tabell) med en klass inbyggt med Bootstraps egna CSS. *@
    <table class="table table-dark table-striped">
        <thead>
            @* Huvudets av tabellen så har vi table rows som har olika namn på sig. *@
            <tr>
                <th>Account Name</th>
                <th>Account Number</th>
                <th>Balance</th>
                <th>Type</th>
                <th>Status</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>


            @* Här används en foreach för att enkelt gå igenom en lista av konton och visar dom i tabellen. För varje konto i List<Account> accounts. *@
            @foreach (var account in accounts) 
            {
                <tr>
                    <td>@account.AccountName</td>
                    <td>@account.AccountNumber</td>
                    <td>@account.Balance</td>
                    <td>@account.AccountType</td>

                    @* Detta visar om kontot är aktiv eller oaktiv. *@
                    <td>@(account.ActiveAccount ? "Active" : "Inactive")</td>

                    @* När onclick knappen klickas triggas igång DeleteAccount() funktionen med rätt account.id *@
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteAccount(account.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private List<Account> accounts = new(); // Här är en lista av konton som lagrar användarens bankkonton.
    private Account newAccount = new Account(); //Vi har skapat en temporär modell för det nya kontot.


    //Detta är en task som körs när sidan laddas för att hämta befintliga konton.
    protected override async Task OnInitializedAsync()
    {


        // Vi har en variabel som heter authState som lagrar information från högra sidan av =. Den högra sidan säger att den hämtar den akutella användarens autentiseringstillstånd som är Blazors inbyggda metod.
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        // Likt ovan lagras information i user, och här hämtas användarens från databasen. authState.User innehåller information som username, epost etc. UserManager.GetUserAsync ser till att vi får hela användarobjektet ink id.
        var user = await UserManager.GetUserAsync(authState.User);

        //If satsen körs om ingen är inloggad, så gör den ingeting.
        if (user == null)
        {
            return;
        }

        //Detta hämtar konton från databasen och lagrar i accounts variabeln.
        accounts = await AccountService.GetUserAccountsAsync(user);
    }

    // Detta är en task/funktion som är till för att skapa bankkonton.
    private async Task CreateAccount()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user == null)
        {
            return;
        }

        //Här sätter/lagrar vi en userId på nya kontot via den inloggade användarens id som är user.Id; Det är här kopplingen mellan konto och användaren sker.
        newAccount.UserId = user.Id;

        //Här anropar vi CreateAccountAsync funktionen från BankAccountService som sparar kontot i databasen.
        await AccountService.CreateAccountAsync(user, newAccount);

        // Här uppdaterar vi accounts listan efter skapandet av ett bankkonto.
        accounts = await AccountService.GetUserAccountsAsync(user);

        // Detta återställer formuläret
        newAccount = new Account();
    }


    //Detta är en task funktion som är till för att Delete ett konto, som måste ta in en parameter.
    private async Task DeleteAccount(int accountId)
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user == null)
        {
            return;
        }

        await AccountService.DeleteAccountAsync(user, accountId);

        //Detta uppdaterar listan efter borttagning av konton.
        accounts = await AccountService.GetUserAccountsAsync(user);

    }

}

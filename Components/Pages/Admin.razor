@page "/admin"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using BlazorEFIdentity.Data

@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

@attribute [Authorize(Roles = "Admin")]

<h3>Admin Overview</h3>

@if (users is null)
{
    <p>Loading users...</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Email</th>
                <th>Roles</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Email</td>
                    <td>@string.Join(", ", user.Roles)</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="@(() => RemoveRole(user, "User"))">Remove User Role</button>
                        <button class="btn btn-success btn-sm" @onclick="@(() => AddRole(user, "Admin"))">Make Admin</button>

                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UserWithRoles> users = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        var allUsers = UserManager.Users.ToList();
        users = new List<UserWithRoles>();

        foreach (var user in allUsers)
        {
            var roles = await UserManager.GetRolesAsync(user);
            users.Add(new UserWithRoles
                {
                    Id = user.Id,
                    Email = user.Email,
                    Roles = roles.ToList()
                });
        }
    }

    private async Task AddRole(UserWithRoles user, string role)
    {
        var appUser = await UserManager.FindByIdAsync(user.Id);
        if (appUser == null) return;

        if (!await RoleManager.RoleExistsAsync(role))
        {
            await RoleManager.CreateAsync(new IdentityRole(role)); // Skapa rollen om den saknas
        }

        if (!await UserManager.IsInRoleAsync(appUser, role))
        {
            var result = await UserManager.AddToRoleAsync(appUser, role);
            if (result.Succeeded)
            {
                await LoadUsers(); // Uppdatera listan
            }
        }
    }

    private async Task RemoveRole(UserWithRoles user, string role)
    {
        var appUser = await UserManager.FindByIdAsync(user.Id);
        if (appUser == null) return;

        if (await UserManager.IsInRoleAsync(appUser, role))
        {
            var result = await UserManager.RemoveFromRoleAsync(appUser, role);
            if (result.Succeeded)
            {
                await LoadUsers(); // Uppdatera listan
            }
        }
    }



    private class UserWithRoles
    {
        public string Id { get; set; }
        public string Email { get; set; }
        public List<string> Roles { get; set; } = new List<string>();
    }
}
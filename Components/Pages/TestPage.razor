@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using BlazorEFIdentity.Data
@using BlazorEFIdentity.Components
@using BlazorEFIdentity.Models

@page "/test"

@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

<h3>TestPage</h3>
<a class="btn btn-success btn-sm" @onclick="AddRole">Make Admin</a>


@code {
    private List<UserWithRoles> users = new();
    public string adminRole = "Admin";
    public string userRole = "User";
    public ApplicationUser user;


    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        var allUsers = UserManager.Users.ToList();
        users = new List<UserWithRoles>();

        foreach (var user in allUsers)
        {
            var roles = await UserManager.GetRolesAsync(user);
            users.Add(new UserWithRoles
                {
                    Id = user.Id,
                    Email = user.Email,
                    Roles = roles.ToList()
                });
        }
    }

    private async Task AddRole()
    {
        var newUser = users.FirstOrDefault();
        var appUser = await UserManager.FindByIdAsync(newUser.Id);
        if (appUser == null) return;

        // if (!await RoleManager.RoleExistsAsync(role))
        // {
        //     await RoleManager.CreateAsync(new IdentityRole(role)); // Skapa rollen om den saknas
        // }

        if (!await UserManager.IsInRoleAsync(appUser, adminRole))
        {
            var result = await UserManager.AddToRoleAsync(appUser, adminRole);
            if (result.Succeeded)
            {
                await LoadUsers(); // Uppdatera listan
            }
        }
    }

    private async Task RemoveRole()
    {
        var appUser = await UserManager.FindByIdAsync(user.Id);
        if (appUser == null) return;

        if (await UserManager.IsInRoleAsync(appUser, adminRole))
        {
            var result = await UserManager.RemoveFromRoleAsync(appUser, adminRole);
            if (result.Succeeded)
            {
                await LoadUsers(); // Uppdatera listan
            }
        }
    }


    private class UserWithRoles
    {
        public string Id { get; set; }
        public string Email { get; set; }
        public List<string> Roles { get; set; } = new List<string>();
    }
}
}
